// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  profile       Player?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Player {
  id        Int         @id @default(autoincrement())
  user      User        @relation(fields: [userId], references: [id])
  userId    String      @unique
  name      String
  waves     Int
  credits   Int
  ships     Ship[]
  equipment Equipment[]

  @@index([userId])
}

// add animation sprite possible
model Ship {
  id           Int         @id @default(autoincrement())
  owner        Player      @relation(fields: [playerId], references: [id])
  playerId     Int
  level        Int
  health       Int
  bulletRange  Int
  bulletSpeed  Int
  bulletDamage Int
  shootDelay   Int
  shield       Int
  battery      Int
  sprite       String
  isCurrent    Boolean
  equipment    Equipment[]
  animation    String?
  rarity       String      @default("T1")

  @@index([playerId])
}

model Equipment {
  id           Int     @id @default(autoincrement())
  player       Player? @relation(fields: [playerId], references: [id])
  playerId     Int
  ship         Ship?   @relation(fields: [shipId], references: [id])
  shipId       Int?
  sprite       String
  type         String
  level        Int
  bulletDamage Int
  bulletRange  Int
  bulletSpeed  Int
  shootDelay   Int
  shield       Int
  health       Int
  battery      Int
  rarity       String  @default("T1")

  @@index([playerId])
  @@index([shipId])
}
